import { NextResponse } from 'next/server';
import OpenAI from 'openai';
import { systemPrompt, examples } from '../../../utils/llmPrompt';

// Default fallback layout
const FALLBACK_LAYOUT = {
  mode: "ai",
  layout: ["HeroSection", "ProductGrid", "FooterSection"],
  notes: "Fallback layout due to error or empty request."
};

// Schema for validation
const VALID_SECTIONS = [
  "HeroSection", 
  "ProductGrid", 
  "StorySection", 
  "TestimonialSection", 
  "CTASection", 
  "FooterSection"
];

// Initialize OpenAI client if API key is available
const openai = process.env.OPENAI_API_KEY 
  ? new OpenAI({ apiKey: process.env.OPENAI_API_KEY })
  : null;

export async function POST(req: Request) {
  try {
    const { prompt } = await req.json();
    
    if (!prompt || typeof prompt !== 'string') {
      console.log('No prompt provided, using fallback layout');
      return NextResponse.json(FALLBACK_LAYOUT);
    }

    console.log(`Processing prompt: "${prompt.substring(0, 50)}${prompt.length > 50 ? '...' : ''}"`);
    
    // Check if OpenAI client is available
    if (!openai) {
      console.log('No OpenAI API key provided, using mock response');
      return NextResponse.json(mockGenerateLayout(prompt));
    }
    
    // Try to generate a layout with retries
    let layoutResult;
    try {
      layoutResult = await generateLayout(prompt, openai);
    } catch (error) {
      console.error('First attempt failed, retrying...', error);
      try {
        // Retry once on failure
        layoutResult = await generateLayout(prompt, openai);
      } catch (retryError) {
        console.error('Retry failed, using fallback layout', retryError);
        return NextResponse.json(FALLBACK_LAYOUT);
      }
    }

    return NextResponse.json(layoutResult);
  } catch (error) {
    console.error('Error in build-layout API:', error);
    return NextResponse.json(FALLBACK_LAYOUT);
  }
}

async function generateLayout(prompt: string, client: OpenAI) {
  const response = await client.chat.completions.create({
    model: "gpt-4o-mini",
    messages: [
      { role: "system" as const, content: systemPrompt },
      ...examples.map(ex => ({ 
        role: ex.role as "user" | "assistant" | "system", 
        content: ex.content 
      })),
      { role: "user" as const, content: prompt }
    ],
    temperature: 0.2,
    max_tokens: 300,
  });

  const result = response.choices[0]?.message?.content?.trim();
  
  if (!result) {
    return FALLBACK_LAYOUT;
  }

  try {
    const parsedResult = JSON.parse(result);
    return validateAndSanitizeLayout(parsedResult);
  } catch (error) {
    console.error('Failed to parse LLM response:', error);
    return FALLBACK_LAYOUT;
  }
}

function validateAndSanitizeLayout(layoutData: any) {
  // If the data doesn't match our expected structure, use fallback
  if (!layoutData || typeof layoutData !== 'object') {
    return FALLBACK_LAYOUT;
  }

  // Validate mode
  if (layoutData.mode !== 'ai' && layoutData.mode !== 'custom') {
    layoutData.mode = 'ai';
  }

  // Validate layout array
  if (!Array.isArray(layoutData.layout) || layoutData.layout.length === 0) {
    return FALLBACK_LAYOUT;
  }

  // Filter out any invalid section names
  layoutData.layout = layoutData.layout
    .filter((section: any) => 
      typeof section === 'string' && VALID_SECTIONS.includes(section)
    );

  // If filtering emptied the array, use fallback
  if (layoutData.layout.length === 0) {
    return FALLBACK_LAYOUT;
  }

  // Ensure the notes field is a string
  if (typeof layoutData.notes !== 'string') {
    layoutData.notes = '';
  }

  return layoutData;
}

// Mock function for development without API key
function mockGenerateLayout(prompt: string) {
  console.log('Using mock layout generator for prompt:', prompt);
  
  // Simple keyword matching to simulate AI
  const layoutData = {
    mode: "ai",
    layout: ["HeroSection", "ProductGrid", "FooterSection"],
    notes: "Generated by mock layout engine"
  };
  
  // Add sections based on keywords in the prompt
  if (prompt.toLowerCase().includes('story')) {
    layoutData.layout.splice(1, 0, "StorySection");
  }
  
  if (prompt.toLowerCase().includes('testimonial')) {
    layoutData.layout.splice(layoutData.layout.length - 1, 0, "TestimonialSection");
  }
  
  if (prompt.toLowerCase().includes('cta')) {
    layoutData.layout.splice(layoutData.layout.length - 1, 0, "CTASection");
  }
  
  return layoutData;
} 